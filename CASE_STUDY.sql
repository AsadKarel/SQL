# SECTION A: 

-- Find the country wise count of customers.
SELECT COUNTRY, COUNT(*) COUNT_OF_CUSTOMERS FROM customer GROUP BY COUNTRY ORDER BY COUNT(*) DESC;

-- Display the products which are not discontinued.
SELECT ProductName FROM product WHERE IsDiscontinued = 0;

-- Display the list of companies along with the product name that they are supplying.
SELECT CompanyName,ProductName FROM supplier T1 JOIN product T2 ON T1.Id=T2.SupplierId;

-- Display customer's information who stays in 'Mexico'
SELECT * FROM customer WHERE Country = 'Mexico';

-- Display the costliest item that is ordered by the customer.
SELECT DISTINCT ProductName FROM
(
SELECT T2.Id, ProductName, SupplierId, Package, IsDiscontinued, OrderId, ProductId, T1.UnitPrice, Quantity
 FROM product T2 RIGHT JOIN 
(SELECT * FROM orderitem WHERE UnitPrice =
(SELECT MAX(UnitPrice) FROM orderitem)) T1
ON T2.Id = T1.ProductId) A ;

-- Display supplier id who owns highest number of products
SELECT CompanyName FROM
(
SELECT CompanyName, COUNT(ProductName) PROD FROM product T1 JOIN supplier T2 
ON T2.Id = T1.SupplierId 
GROUP BY CompanyName 
ORDER BY COUNT(ProductName) DESC) A 
WHERE PROD = 5;

-- Display month wise and year wise count of the orders placed.
SELECT CONCAT(MONTH(OrderDate),'/' ,YEAR(OrderDate)) MONTH_YEAR ,COUNT(T1.Id) ORDER_PLACED 
FROM orders T1 JOIN orderitem T2 
ON T2.OrderId = T1.Id 
GROUP BY MONTH(OrderDate), YEAR(OrderDate) ;

-- Which country has maximum suppliers.
SELECT Country FROM
(
SELECT Country, count(*) SUPPLIER_COUNT FROM supplier 
GROUP BY Country ORDER BY count(*) DESC LIMIT 1
)A ;

-- Which customers did not place any order.
SELECT CONCAT(FirstName,' ',LastName) CUST_NAME FROM customer T1 LEFT JOIN orders T2 
ON T2.CustomerId = T1.Id
WHERE OrderDate IS NULL;

# SECTION B:
-- Arrange the product id, product name based on high demand by the customer.
SELECT T2.ProductId, ProductName,  T2.UnitPrice, Quantity , (T2.UnitPrice*Quantity) TOTAL_RATE
 FROM product T1 JOIN orderitem T2 
 ON T1.Id = T2.ProductId
 ORDER BY Quantity DESC, (T2.UnitPrice*Quantity) DESC;
 
 -- Display the number of orders delivered every year.
 SELECT YEAR(OrderDate) , COUNT(*) ORDER_PLACED
 FROM orders T1 JOIN customer T2 
 ON T2.Id = T1.CustomerId
 GROUP BY YEAR(OrderDate);
 
 -- OR
 SELECT YEAR(OrderDate) , COUNT(CustomerId) COUNT FROM
 (
 SELECT OrderDate, CustomerId, OrderNumber
 FROM orders T1 JOIN customer T2 
 ON T2.Id = T1.CustomerId
) A  GROUP BY YEAR(OrderDate);
 
 -- Calculate year-wise total revenue.
SELECT YEAR(OrderDate) YEARS, SUM(TotalAmount) TOT_ORDER_REV_AMOUNT , SUM(TOTALRATE) TOT_REV_RATE FROM
(
 SELECT T3.UnitPrice, CompanyName, ContactName,  OrderId, ProductId, Quantity, OrderDate, OrderNumber, TotalAmount , T3.UnitPrice*Quantity TOTALRATE
 FROM product T1 JOIN supplier T2 
 ON T2.Id = T1.SupplierId JOIN orderitem T3 ON T1.Id = T3.ProductId
 JOIN orders T4 ON T4.Id = T3.OrderId) T
 GROUP BY YEAR(OrderDate);

-- Display the customer details whose order amount is maximum including his past orders.

SELECT T1.Id, SUM(T3.UnitPrice*T3.Quantity) TOTAL_ORDER_AMOUNT 
FROM customer T1 JOIN  orders T2 ON T1.Id = T2.CustomerId 
JOIN orderitem T3 ON T2.Id = T3.OrderId
GROUP BY T1.Id;

-- Display total amount ordered by each customer from high to low. A sales and marketing department 
-- of this company wants to find out how frequently customer have business with them. 
-- This can be done in two ways. (Answer Q 6 and Q 7 for the same)
SELECT T1.Id, SUM(T3.UnitPrice*T3.Quantity) TOTAL_ORDER_AMOUNT 
FROM customer T1 JOIN  orders T2 ON T1.Id = T2.CustomerId 
JOIN orderitem T3 ON T2.Id = T3.OrderId
GROUP BY T1.Id ORDER BY SUM(T3.UnitPrice*T3.Quantity) DESC;

-- 6.	Approach 1. List the current and previous order amount for each customers.
-- 7.	Approach 2. List the current and previous order amount for each customers.
SELECT *,
LAG(TOTAL_AMOUNT,1,'NO ORDER BEFORE') OVER(PARTITION BY Id) PREVIOUS
FROM 
(
SELECT T1.Id, T2.OrderDate, (T3.UnitPrice*T3.Quantity) TOTAL_AMOUNT
FROM customer T1 JOIN  orders T2 ON T1.Id = T2.CustomerId 
JOIN orderitem T3 ON T2.Id = T3.OrderId) T;

-- Find out top 3 suppliers in terms of revenue generated by their products.
SELECT SupplierId, ContactName, CompanyName, SUM(TotalAmount) REVENUE 
FROM supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId 
JOIN orderitem T3 ON T3.ProductId = T2.Id
JOIN orders T4 ON T4.Id = T3.OrderId 
GROUP BY SupplierId, ContactName 
ORDER BY SUM(TotalAmount) DESC 
LIMIT 3;

-- Display latest order date (should not be same as first order date) of all the customers with customer details.

SELECT DISTINCT CustomerId, CONCAT(FirstName,' ',LastName) NAME ,City, Country, OrderDate, ORDERS FROM 
(
SELECT CustomerId, FirstName, LastName, City, Country, Phone,  OrderDate, OrderNumber, TotalAmount,
	LAG(OrderDate,1,'NO DATE') OVER() ORDERS FROM customer T1 JOIN orders T2 ON T1.Id = T2.CustomerId) T
    WHERE OrderDate<>ORDERS;

-- Display the product name and supplier name for each order

SELECT DISTINCT ContactName, ProductName FROM
(
SELECT SupplierId, CompanyName,  ProductName, ContactName, OrderId
FROM supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId 
JOIN orderitem T3 ON T3.ProductId = T2.Id 
JOIN orders T4 ON T4.Id = T3.OrderId
WHERE OrderId IN (SELECT DISTINCT OrderId FROM orderitem)) T ;

# SECTION C:

-- Fetch the records to display the customer details who ordered more than 10 products in the single order
SELECT NAME, COUNT(*) SINGLE_ORDER FROM 
(
SELECT A.NAME, A.OrderDate, A.OrderNumber, A.ProductId, A.ProductName FROM 
(
SELECT   CustomerId, CONCAT(FirstName,' ', LastName)NAME , City, Country, Phone, OrderDate, OrderNumber, TotalAmount, OrderId, ProductId, T3.UnitPrice, Quantity, ProductName
 FROM customer T1 JOIN orders T2 ON T1.Id = T2.CustomerId 
JOIN orderitem T3 ON T2.Id = T3.OrderId 
JOIN product T4 ON T4.Id = T3.ProductId) A, 
(SELECT   CustomerId, CONCAT(FirstName,' ', LastName)NAME , City, Country, Phone, OrderDate, OrderNumber, TotalAmount, OrderId, ProductId, T3.UnitPrice, Quantity, ProductName
 FROM customer T1 JOIN orders T2 ON T1.Id = T2.CustomerId 
JOIN orderitem T3 ON T2.Id = T3.OrderId 
JOIN product T4 ON T4.Id = T3.ProductId) B
WHERE A.NAME=B.NAME AND A.OrderNumber=B.OrderNumber AND A.ProductName<>B.ProductName) C 
GROUP BY NAME HAVING COUNT(*)>=20;

-- Display all the product details with the ordered quantity size as 1.
SELECT * FROM product T1 JOIN orderitem T2 ON T1.Id = T2.ProductId
WHERE Quantity = 1;

-- Display the compan(y)ies which supplies products whose cost is above 100.
SELECT CompanyName FROM supplier WHERE Id IN 
(
SELECT SupplierId FROM product WHERE Id IN 
(SELECT DISTINCT ProductId FROM orderitem WHERE  UnitPrice > 100)) ;

-- Create a combined list to display customers and supplier list as per the below format.
SELECT REPLACE (Id, ID, 'Customer') TYPE, CONCAT(FirstName,' ', LastName) NAME , City, Country, Phone
FROM customer
UNION ALL
SELECT REPLACE (Id, ID, 'Supplier') TYPE, ContactName,  City, Country, Phone
FROM supplier;

-- Display the customer list who belongs to same city and country arrange in country wise.
SELECT CONCAT(T1.FirstName,' ', T1.LastName) NAME1, CONCAT(T2.FirstName,' ', T2.LastName) NAME2, T2.City, T2.Country
FROM customer T1 CROSS JOIN customer T2 
WHERE T1.FirstName<>T2.FirstName AND T1.City=T2.City;

# SECTION D:

-- Company sells the product at different discounted rates. 
-- Refer actual product price in product table and selling price in the order item table. 
-- Write a query to find out total amount saved in each order then display the orders 
-- from highest to lowest amount saved. 
SELECT ProductName, sum(actual_price) actual_rate, sum(discounted_price) with_discount, 
		sum(Quantity) total_quantity, sum(discount) total_discount, sum(total_discount) net_discount
	FROM 
(
SELECT ProductName, SupplierId, T1.UnitPrice actual_price, T2.UnitPrice discounted_price, 
	Quantity , T1.UnitPrice-T2.UnitPrice discount, T1.UnitPrice*Quantity - T2.UnitPrice*Quantity total_discount
  FROM product T1 JOIN orderitem T2 ON T1.Id = T2.ProductId 
  ) T
  GROUP BY ProductName ORDER BY sum(total_discount) DESC;
  
  -- 2.	Mr. Kavin want to become a supplier. He got the database of "Richard's Supply" for reference. 
  -- Help him to pick: 
-- a. List few products that he should choose based on demand.
SELECT ProductName FROM
(
SELECT ProductId,ProductName,SupplierId, SUM(T2.UnitPrice) actual_price, SUM(T1.UnitPrice) discount,  SUM(Quantity) total_quantity, Package
 FROM orderitem T1 JOIN product T2 ON T2.Id = T1.ProductId 
 GROUP BY ProductName ORDER BY SUM(Quantity) DESC LIMIT 5) R;
 -- HERE WE SUGGEST THESE 5 PRODUCTS Mr. Kavin SHOULD GO FOR TO COMMENCE HIS BUISNESS.

-- b. Who will be the competitors for him for the products suggested in above questions.
 
 SELECT CompanyName FROM supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId
 WHERE ProductName IN 
 (
 SELECT ProductName FROM
(
SELECT ProductId,ProductName,SupplierId, SUM(T2.UnitPrice) actual_price, SUM(T1.UnitPrice) discount,  SUM(Quantity) total_quantity, Package
 FROM orderitem T1 JOIN product T2 ON T2.Id = T1.ProductId 
 GROUP BY ProductName ORDER BY SUM(Quantity) DESC LIMIT 5) R
 );
 -- THESE 5 COMPANIES ARE THE COMPITITOORS FOR Mr. Kavin  THEY MANUFACTURE THE CONTENT WHICH IS IN HUGE DEMAND.

-- 3.	Create a combined list to display customers and suppliers details considering the following criteria 
CREATE TABLE IF NOT EXISTS DATA1
SELECT * FROM
(
SELECT  
CustomerId, CONCAT(FirstName,' ',LastName) cust_name, T1.City cust_city, 
T1.Country cust_country,  ContactName, CompanyName,  T5.City supp_city, T5.Country supp_country
 FROM customer T1 JOIN orders T2 ON T1.Id = T2.CustomerId
JOIN orderitem T3 ON T3.OrderId = T2.Id JOIN product T4 ON T3.ProductId = T4.Id
JOIN supplier T5 ON T5.Id = T4.SupplierId) R1;
-- â€¢	Both customer and supplier belong to the same country
SELECT cust_name customer, ContactName supplier, supp_city, supp_country
FROM DATA1 WHERE cust_name<>ContactName AND cust_city=supp_city;

-- â€¢	Customer who does not have supplier in their country
SELECT cust_name, cust_country, ContactName, supp_country
 FROM DATA1
WHERE cust_country<>supp_country;

-- OR BELOW IS THE LIST OF CUSTOMERS COUNTRY WHERE THERE IS NO SUPPLIER EXIST.
SELECT * FROM customer
WHERE Country NOT IN 
(SELECT Country FROM supplier);

-- â€¢	Supplier who does not have customer in their country
SELECT cust_name, cust_country, ContactName, supp_country
 FROM DATA1
WHERE cust_country<>supp_country;

-- OR BELOW LIST SHOWS THAT, THESE ARE TEH SUPPLIER'S COUNTRY WHERE NO CUSTMOER LIVE.
SELECT * FROM supplier 
WHERE Country NOT IN
(SELECT Country FROM customer);

-- 4.	Every supplier supplies specific products to the customers. 
-- Create a view of suppliers and total sales made by their products and 
-- write a query on this view to find out top 2 suppliers (using windows function RANK()
--  in each country by total sales done by the products.
SELECT *,
DENSE_RANK() OVER(ORDER BY COUNRY_TOT_AMNT DESC) 'RANK'
FROM
(
SELECT ContactName, ProductName, SUM(total_amount) COUNRY_TOT_AMNT, Country
FROM 
(
SELECT CompanyName, ContactName,  ProductName, SUM(T2.UnitPrice) actual, SUM(T3.UnitPrice) discount, SUM(TotalAmount) total_amount, Country
 FROM supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId 
 JOIN orderitem T3 ON T3.ProductId = T2.Id JOIN orders T4 ON T4.Id = T3.OrderId
 GROUP BY ContactName ORDER BY SUM(TotalAmount) DESC) R1
 GROUP BY Country) R2 LIMIT 2;

-- 5.	Find out for which products, UK is dependent on other countries for the supply. 
-- List the countries which are supplying these products in the same list.
SELECT * FROM  supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId;

SELECT ProductName FROM (
SELECT ProductName, Country FROM  supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId) R1
WHERE ProductName NOT IN (
SELECT ProductName FROM supplier T1 JOIN product T2 ON T1.Id = T2.SupplierId WHERE Country LIKE 'UK') ;
-- UK IS DEPENDENT ON THESE PRODUCTS, HENCE THESE PRODUCTS DO NOT GET MANUFACTURED IN UK.
